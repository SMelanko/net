language: cpp

sudo: false

os: linux
dist: bionic

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps

matrix:
  include:

    #############################################################################
    # Clang on macOS
    #

    - os: osx
      env:
        - CXX_COMPILER=clang++
        - BUILD_TYPE=Release
      osx_image: xcode11.3
      compiler: clang

    #############################################################################
    # GCC on Linux
    #

    - env:
        - JOB="GCC 7"
        - CXX_COMPILER=g++-7
        - BUILD_TYPE=Release
      addons: &gcc7
        apt:
          packages:
            - g++-7
          sources:
            - ubuntu-toolchain-r-test

install:
  # Set the ${CXX} variable properly.
  - export CXX=${CXX_COMPILER}
  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/.
  - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
  - mkdir -p "${DEPS_DIR}" && cd "${DEPS_DIR}"
  # Install the latest CMake (unless already installed on macOS).
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      CMAKE_VERSION=3.16.5
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew update
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version
  # Install Conan package manager.
  - |
    if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
      sudo pip install conan
      conan profile new default --detect
      conan profile update settings.compiler.libcxx=libstdc++11 default
    else
      brew install conan || brew upgrade conan
      conan profile new default --detect
    fi
  - conan --version
  - conan profile show default

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build && cd build
  - conan install .. --build missing -s build_type=Debug
  - conan install .. --build missing -s build_type=Release
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

script:
  - cmake --build . --config $BUILD_TYPE -- -j2
